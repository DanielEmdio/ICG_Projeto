/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 space_ship.glb 
Author: wildcake (https://sketchfab.com/wildcake)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/space-ship-91aad43c4a7449278d10c362aeac1c12
Title: space ship
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { Matrix4 , Vector3 } from 'three'
import { updateShip } from '../controls'
import { Quaternion } from 'three'

const x = new Vector3(1, 0, 0)
const y = new Vector3(0, 1, 0)
const z = new Vector3(0, 0, 1)

export const shipPosition = new Vector3(9, -26, 160)

const delayedRotMatrix = new Matrix4()
const delayedQuaternion = new Quaternion()

export function Ship(props) {
  const { nodes, materials } = useGLTF('assets/models/space_ship.glb')
  const group = useRef()

  useFrame(({camera}) => {
    {/*shipPosition.add(new Vector3(0, 0, -0.005)); */}

    updateShip(shipPosition, x, y, z, camera)

    const rotMatrix = new Matrix4().makeBasis(x, y, z)

    const matrix = new Matrix4()
      .multiply(new Matrix4().makeTranslation(shipPosition.x, shipPosition.y, shipPosition.z))
      .multiply(rotMatrix)
  
    group.current.matrixAutoUpdate = false
    group.current.matrix.copy(matrix)
    group.current.matrixWorldNeedsUpdate = true

    var quaternionA = new Quaternion().copy(delayedQuaternion);
    var quaternionB = new Quaternion();
    quaternionB.setFromRotationMatrix(rotMatrix);

    var interpolationFactor = 0.175;
    var interpolatedQuaternion = new Quaternion().copy(quaternionA);
    interpolatedQuaternion.slerp(quaternionB, interpolationFactor);
    delayedQuaternion.copy(interpolatedQuaternion);

    delayedRotMatrix.identity();
    delayedRotMatrix.makeRotationFromQuaternion(delayedQuaternion);

  
    const cameraMatrix = new Matrix4()
      .multiply(new Matrix4().makeTranslation(shipPosition.x, shipPosition.y, shipPosition.z))
      .multiply(rotMatrix)
      .multiply(new Matrix4().makeRotationX(-0.2))
      .multiply(
        new Matrix4().makeTranslation(0, 0.015 ,1)
      )
      
    camera.matrixAutoUpdate = false;
    camera.matrix.copy(cameraMatrix);
    camera.matrixWorldNeedsUpdate = true;
  
  })

  return (
    <group ref={group}>
      <group {...props} dispose={null} rotation-y={Math.PI}>
        <group rotation={[-Math.PI / 2, 0, 0]}>
          <group rotation={[Math.PI / 2, 0, 0]}>
            <mesh geometry={nodes.defaultMaterial.geometry} material={materials.lambert1} />
            <mesh geometry={nodes.defaultMaterial_1.geometry} material={materials.lambert1} />
            <mesh geometry={nodes.defaultMaterial_2.geometry} material={materials.lambert1} />
            <mesh geometry={nodes.defaultMaterial_3.geometry} material={materials.blinn1} />
            <mesh geometry={nodes.defaultMaterial_4.geometry} material={materials.lambert1} />
            <mesh geometry={nodes.defaultMaterial_5.geometry} material={materials.lambert1} />
            <mesh geometry={nodes.defaultMaterial_6.geometry} material={materials.lambert1} />
            <mesh geometry={nodes.defaultMaterial_7.geometry} material={materials.lambert1} />
            <mesh geometry={nodes.defaultMaterial_8.geometry} material={materials.lambert1} />
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('assets/models/space_ship.glb')
